/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
var fs = require('fs');
const { request } = require('http');


fs.readFile('todofile.txt', 'utf8' ,function (error,data) {
  if(error) {
      console.error(error);
      return;
  }
  console.log(data);    
})

const app = express();

app.use(bodyParser.json());

let todos = [];

function generateRandomToken(length) {
  const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';
  let token = '';
  
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    token += characters.charAt(randomIndex);
  }
  return token;
}

class Todo {
  constructor (id, title, completed, description){
    this.id = id;
    this.title = title;
    this.completed = completed;
    this.description = description;
  }
}

app.get('/', (request, response) => {
  response.status(200).json({
    "title":"Welcome to home"
  })
})

app.get('/todos',(request, response) => {
  response.status(200).send(todos)
})

app.get('/todos/:id',(request, response) => {
  let id = request.params.id;
  let todo = todos.find(todo => todo.id == id);
  if(todo !== undefined) {
    response.status(200).json(todo)
  }
  else if (todo == undefined) {
    response.status(404).send('Todo not found')
  }
})

app.post('/todos', (request, response) => {
  let {title ,completed ,description} = request.body;
  let todo = new Todo;

  todo.id = generateRandomToken(7);
  todo.title = title;
  todo.completed = completed;
  todo.description = description;
  todos.push(todo);
  response.status(201).json({"id":todo.id})
})

app.put('/todos/:id',(request,response) => {
  let id = request.params.id;
  let {title ,completed ,description} = request.body;
  let index = todos.findIndex(todo => todo.id == id);
  
  if(index !== -1) {
    let todo = new Todo;
    todo.id = id;
    todo.title = title;
    todo.completed = completed;
    todo.description = description;
    todos[index] = todo;
    response.status(200).send('Todo updated');
  }
  else if (index == -1) {
    response.status(404).send('Todo not found')
  }
})

app.delete('/todos/:id',(request,response) => {
  let id = request.params.id;
  let index = todos.findIndex(todo => todo.id == id);
  if(index !== -1) {
   todos.splice(index,1);
    response.status(200).send("todo deleted");
  }
  else if (index == -1) {
    response.status(404).send('Todo not found')
  }
})


module.exports = app;
